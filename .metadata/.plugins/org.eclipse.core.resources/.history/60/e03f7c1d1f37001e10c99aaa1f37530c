package br.com.viniciusvalongo.testepratico.steps;

import static org.junit.jupiter.api.Assertions.assertEquals;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.concurrent.TimeUnit;

import org.openqa.selenium.WebDriver;
import org.openqa.selenium.chrome.ChromeDriver;

import br.com.viniciusvalongo.testepratico.PageObject;
import br.com.viniciusvalongo.testepratico.db.DB;
import io.cucumber.java.pt.Dado;
import io.cucumber.java.pt.Então;
import io.cucumber.java.pt.Quando;

public class Acesso {
	
	 private WebDriver driver;
	 PageObject pg = new PageObject(driver);
	
	
	@Dado("que acessei o site advantage online shopping")
	public void que_acessei_o_site_advantage_online_shopping() {
		System.setProperty("webdriver.chrome.driver","C:\\drivers\\chromedriver-win64\\chromedriver.exe");
		driver = new ChromeDriver();		
		driver.manage().window().maximize();
		driver.manage().timeouts().implicitlyWait(60000, TimeUnit.MILLISECONDS);
		driver.get("https://advantageonlineshopping.com/#/");
	
	}

	@Quando("clico na opção Special Offer no menu")
	public void clico_na_opção_special_offer_no_menu() {
		pg.clicarOpcaoSpecialOffer();
	}

	@Quando("clico no botão See offer")
	public void clico_no_botão_see_offer() {
		pg.clicarBotaoSeeOffer();
	}

	@Então("devo validar as especificações do produto de acordo com as informações retornadas do banco de automação")
	public void devo_validar_as_especificações_do_produto_de_acordo_com_as_informações_retornadas_do_banco_de_automação() {
		String productName = pg.obterNomeProduto();
		Connection conn = null;
		Statement st = null;
		ResultSet rs = null;
		
		try{
			conn = DB.getConnection();
			st = conn.createStatement();			
			rs = st.executeQuery("SELECT * FROM banco_teste_automacao.massas;");
			while(rs.next()) {
				assertEquals(rs.getString("NAME_PRODUCT"), productName);
			}
		}
		catch(SQLException e) {
			e.printStackTrace();
		}	
	}

	@Quando("altero a cor do produto de acordo com a cor informada no banco de automação")
	public void altero_a_cor_do_produto_de_acordo_com_a_cor_informada_no_banco_de_automação() {
		
	}
	@Quando("clico no botão Add to cart")
	public void clico_no_botão_add_to_cart() {
		
	}

	@Então("devo validar se o produto foi adicionado ao carrinho com a cor selecionada")
	public void devo_validar_se_o_produto_foi_adicionado_ao_carrinho_com_a_cor_selecionada() {
		
	}

	@Quando("pesquiso o produto clicando no ícone de lupa")
	public void pesquiso_o_produto_clicando_no_ícone_de_lupa() {
		
	}

	@Quando("seleciono o produto pesquisado")
	public void seleciono_o_produto_pesquisado() {
		
	}

	@Quando("altero a cor do produto para uma diferente da existente no banco de automação")
	public void altero_a_cor_do_produto_para_uma_diferente_da_existente_no_banco_de_automação() {
		//String color = driver.findElement(By.xpath("/html/body/div[3]/section/article[1]/div[2]/div[2]/div/div[1]/div[2]/span[1]")).getAttribute("title");
		//return color;
	}

	@Quando("altero a quantidade de produtos que desejo comprar")
	public void altero_a_quantidade_de_produtos_que_desejo_comprar() {
		
	 	
	}

	@Quando("acesso a página de checkout")
	public void acesso_a_página_de_checkout() {
		
	}

	@Então("devo validar que a soma dos preços corresponde ao total apresentado na página de checkout")
	public void devo_validar_que_a_soma_dos_preços_corresponde_ao_total_apresentado_na_página_de_checkout() {

	}

	@Então("realizo um update no banco de automação para alterar a cor existente para a cor selecionada no teste")
	public void realizo_um_update_no_banco_de_automação_para_alterar_a_cor_existente_para_a_cor_selecionada_no_teste() {
		//String color = altero_a_cor_do_produto_para_uma_diferente_da_existente_no_banco_de_automação();
		Connection conn = null;
		PreparedStatement st = null;		
		try{
			conn = DB.getConnection();
			
			st = conn.prepareStatement(
					"UPDATE massas "
					+ "SET COLOR = ? "
					+ "WHERE "
					+ "(COLOR = ?)");
			
			st.setObject(1, "BLUE");
			st.setObject(2, "GRAY");
					
		}
		catch(SQLException e) {
			e.printStackTrace();
		}
		finally {
			DB.closeStatement(st);
			DB.closeConnection();
		}
	}

	@Dado("que acessei o site https:\\\\/\\\\/advantageonlineshopping.com")
	public void que_acessei_o_site_https_advantageonlineshopping_com() {

	}

	@Quando("clico no carrinho de compras")
	public void clico_no_carrinho_de_compras() {

	}

	@Quando("removo o produto do carrinho de compras")
	public void removo_o_produto_do_carrinho_de_compras() {
		
	}

	@Então("devo validar que o carrinho de compras está vazio")
	public void devo_validar_que_o_carrinho_de_compras_está_vazio() {		
		//Assertions.assertTrue(driver.getPageSource().contains("Your shopping cart is empty"));
	}
	
	

}
